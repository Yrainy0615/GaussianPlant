commit 916c4cf58e50f1783d0ea3818e1fb31b870fba30
Author: Seth Pendergrass <8273706+pens@users.noreply.github.com>
Date:   Sun Aug 4 21:47:04 2024 -0700

    [Draft] Enable building on Ubuntu 24.04
    
    On Ubuntu 24.04, the system version of FFmpeg and Embree have removed
    functions required by SIBR. This change shows all of the locations that
    need to be changed in order to build and run the local viewer.
    
    *Note: These changes are for example only; I haven't tested on Windows
    nor with the remote viewer.*

diff --git a/cmake/linux/dependencies.cmake b/cmake/linux/dependencies.cmake
index a7854bb..a13e823 100644
--- a/cmake/linux/dependencies.cmake
+++ b/cmake/linux/dependencies.cmake
@@ -114,7 +114,7 @@ include_directories(${FFMPEG_INCLUDE_DIR})
 ## COMMENT OUT ALL FFMPEG FOR CLUSTER
 
 ###################
-## Find embree3
+## Find embree
 ###################
 sibr_addlibrary(
     NAME embree3
@@ -124,7 +124,7 @@ sibr_addlibrary(
 
 # CLUSTER
 #find_package(embree 3.0 REQUIRED PATHS "/data/graphdeco/share/embree/usr/local/lib64/cmake/" )
-find_package(embree 3.0 )
+find_package(embree 4.0 )
 
 ###################
 ## Find eigen3
diff --git a/src/core/raycaster/Raycaster.cpp b/src/core/raycaster/Raycaster.cpp
index 1733636..dd341b7 100644
--- a/src/core/raycaster/Raycaster.cpp
+++ b/src/core/raycaster/Raycaster.cpp
@@ -208,9 +208,9 @@ namespace sibr
 			SIBR_ERR << "cannot initialize embree, failed cast rays." << std::endl;
 		else
 		{
-			RTCIntersectContext context;
-			rtcInitIntersectContext(&context);
-			rtcOccluded1(*_scene.get(), &context, &ray);
+			RTCOccludedArguments args;
+			rtcInitOccludedArguments(&args);
+			rtcOccluded1(*_scene.get(), &ray, &args);
 		}
 		return ray.tfar < 0.0f;
 	}
@@ -237,9 +237,9 @@ namespace sibr
 			SIBR_ERR << "cannot initialize embree, failed cast rays." << std::endl;
 		else
 		{
-			RTCIntersectContext context;
-			rtcInitIntersectContext(&context);
-			rtcOccluded8(valid8, *_scene.get(), &context, &ray);
+			RTCOccludedArguments args;
+			rtcInitOccludedArguments(&args);
+			rtcOccluded8(valid8, *_scene.get(), &ray, &args);
 		}
 
 		std::array<bool, 8> res;
@@ -272,9 +272,9 @@ namespace sibr
 			SIBR_ERR << "cannot initialize embree, failed cast rays." << std::endl;
 		else
 		{
-			RTCIntersectContext context;
-			rtcInitIntersectContext(&context);
-			rtcIntersect1(*_scene.get(), &context, &rh);
+			RTCIntersectArguments args;
+			rtcInitIntersectArguments(&args);
+			rtcIntersect1(*_scene.get(), &rh, &args);
 			rh.hit.Ng_x = -rh.hit.Ng_x; // EMBREE_FIXME: only correct for triangles,quads, and subdivision surfaces
 			rh.hit.Ng_y = -rh.hit.Ng_y;
 			rh.hit.Ng_z = -rh.hit.Ng_z;
@@ -319,9 +319,9 @@ namespace sibr
 			SIBR_ERR << "cannot initialize embree, failed cast rays." << std::endl;
 		else
 		{
-			RTCIntersectContext context;
-			rtcInitIntersectContext(&context);
-			rtcIntersect8(valid8.data(), *_scene.get(), &context, &rh);
+			RTCIntersectArguments args;
+			rtcInitIntersectArguments(&args);
+			rtcIntersect8(valid8.data(), *_scene.get(), &rh, &args);
 		}
 
 		std::array<RayHit, 8> res;
diff --git a/src/core/raycaster/Raycaster.hpp b/src/core/raycaster/Raycaster.hpp
index 121b502..dd5063a 100644
--- a/src/core/raycaster/Raycaster.hpp
+++ b/src/core/raycaster/Raycaster.hpp
@@ -13,8 +13,8 @@
 #pragma once
 
 # pragma warning(push, 0)
-#  include <embree3/rtcore.h>
-#  include <embree3/rtcore_ray.h>
+#  include <embree4/rtcore.h>
+#  include <embree4/rtcore_ray.h>
 #  include <xmmintrin.h>	// functions for setting the control register
 #  include <pmmintrin.h>	// functions for setting the control register
 # pragma warning(pop)
diff --git a/src/core/video/FFmpegVideoEncoder.cpp b/src/core/video/FFmpegVideoEncoder.cpp
index d908531..d98677a 100644
--- a/src/core/video/FFmpegVideoEncoder.cpp
+++ b/src/core/video/FFmpegVideoEncoder.cpp
@@ -43,7 +43,6 @@ namespace sibr {
 			SIBR_LOG << "[FFMPEG] Registering all." << std::endl;
 			// Ignore next line warning.
 #pragma warning(suppress : 4996)
-			av_register_all();
 			ffmpegInitDone = true;
 		}
 		
@@ -79,7 +78,7 @@ namespace sibr {
 		}
 
 		if (video_st) {
-			avcodec_close(video_st->codec);
+			avcodec_free_context(&pCodecCtx);
 			av_free(frameYUV);
 		}
 		avio_close(pFormatCtx->pb);
@@ -136,7 +135,7 @@ namespace sibr {
 			return;
 		}
 
-		pCodecCtx = video_st->codec;
+		pCodecCtx = avcodec_alloc_context3(pCodec);
 		pCodecCtx->codec_id = fmt->video_codec;
 		pCodecCtx->codec_type = AVMEDIA_TYPE_VIDEO;
 		pCodecCtx->pix_fmt = AV_PIX_FMT_YUV420P;
@@ -229,17 +228,20 @@ namespace sibr {
 #ifndef HEADLESS
 	bool FFVideoEncoder::encode(AVFrame * frame)
 	{
-		int got_picture = 0;
-
-		int ret = avcodec_encode_video2(pCodecCtx, pkt, frameYUV, &got_picture);
-		if (ret < 0) {
-			SIBR_WRG << "[FFMPEG] Failed to encode frame." << std::endl;
-			return false;
-		}
-		if (got_picture == 1) {
-			pkt->stream_index = video_st->index;
-			ret = av_write_frame(pFormatCtx, pkt);
-			av_packet_unref(pkt);
+		int ret = avcodec_send_frame(pCodecCtx, frameYUV);
+		if (ret != 0) {
+		    SIBR_WRG << "[FFMPEG] Failed to send frame to encoder." << std::endl;
+		    return false;
+		}
+		while (ret == 0) {
+		    ret = avcodec_receive_packet(pCodecCtx, pkt);
+		    if (ret == AVERROR(EAGAIN)) {
+		        ret = av_write_frame(pFormatCtx, pkt);
+		    } else if (ret == AVERROR(EINVAL)) {
+		        SIBR_WRG << "[FFMPEG] Failed to encode frame." << std::endl;
+		        return false;
+		    }
+		    av_packet_unref(pkt);
 		}
 
 		return true;
diff --git a/src/core/video/VideoUtils.hpp b/src/core/video/VideoUtils.hpp
index e79dac1..21e80f3 100644
--- a/src/core/video/VideoUtils.hpp
+++ b/src/core/video/VideoUtils.hpp
@@ -937,10 +937,10 @@ namespace sibr {
 
 		uint getModeIndice() const {
 			uint mode, mode_size = 0;
-			for (const auto & [key, val] : bins) {
-				if (val > mode_size) {
-					mode_size = val;
-					mode = key;
+            for (uint b = 0; b < numBins; ++b) {
+				if (bins[b] > mode_size) {
+					mode_size = bins[b];
+					mode = b;
 				}
 			}
 			return mode;
